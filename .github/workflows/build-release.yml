# 工作流名称
name: 构建和发布多平台可执行文件

# 触发条件：仅在创建新标签时触发
on:
  push:
    tags:
      - 'v*'

# 环境变量
env:
  PYTHON_VERSION: '3.9'

# 作业定义
jobs:
  # 构建Windows版本
  build-windows:
    runs-on: windows-latest
    steps:
      # 检出代码
      - name: 检出代码
        uses: actions/checkout@v3

      # 设置Python环境
      - name: 设置Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # 安装依赖
      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      # 构建Windows可执行文件
      - name: 构建Windows可执行文件
        run: |
          pyinstaller --onefile --windowed --icon=icon.ico --name=token-manager main.py

      # 上传构建产物
      - name: 上传Windows构建产物
        uses: actions/upload-artifact@v3
        with:
          name: token-manager-windows
          path: dist/token-manager.exe

  # 构建macOS版本
  build-macos:
    runs-on: macos-latest
    steps:
      # 检出代码
      - name: 检出代码
        uses: actions/checkout@v3

      # 设置Python环境
      - name: 设置Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # 安装依赖
      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      # 构建macOS可执行文件
      - name: 构建macOS可执行文件
        run: |
          pyinstaller --onefile --windowed --icon=icon.ico --name=token-manager main.py

      # 上传构建产物
      - name: 上传macOS构建产物
        uses: actions/upload-artifact@v3
        with:
          name: token-manager-macos
          path: dist/token-manager

  # 构建Linux版本
  build-linux:
    runs-on: ubuntu-latest
    steps:
      # 检出代码
      - name: 检出代码
        uses: actions/checkout@v3

      # 设置Python环境
      - name: 设置Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # 安装Linux系统依赖
      - name: 安装系统依赖
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-tk

      # 安装Python依赖
      - name: 安装Python依赖
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      # 构建Linux可执行文件
      - name: 构建Linux可执行文件
        run: |
          pyinstaller --onefile --windowed --name=token-manager main.py

      # 上传构建产物
      - name: 上传Linux构建产物
        uses: actions/upload-artifact@v3
        with:
          name: token-manager-linux
          path: dist/token-manager

  # 创建发布版本
  create-release:
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    steps:
      # 检出代码
      - name: 检出代码
        uses: actions/checkout@v3

      # 下载所有构建产物
      - name: 下载Windows构建产物
        uses: actions/download-artifact@v3
        with:
          name: token-manager-windows

      - name: 下载macOS构建产物
        uses: actions/download-artifact@v3
        with:
          name: token-manager-macos

      - name: 下载Linux构建产物
        uses: actions/download-artifact@v3
        with:
          name: token-manager-linux

      # 创建发布版本
      - name: 创建GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      # 上传Windows可执行文件到Release
      - name: 上传Windows可执行文件
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./token-manager.exe
          asset_name: token-manager-windows.exe
          asset_content_type: application/octet-stream

      # 上传macOS可执行文件到Release
      - name: 上传macOS可执行文件
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./token-manager
          asset_name: token-manager-macos
          asset_content_type: application/octet-stream

      # 上传Linux可执行文件到Release
      - name: 上传Linux可执行文件
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./token-manager
          asset_name: token-manager-linux
          asset_content_type: application/octet-stream