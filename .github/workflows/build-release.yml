name: 构建和发布多平台可执行文件

on:
  workflow_dispatch:
    inputs:
      version:
        description: '版本号 (例如: v1.0.0)'
        required: true
  push:
    tags:
      - 'v*'

permissions:
  contents: write

env:
  PYTHON_VERSION: '3.9'

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: windows
            arch: x64
            asset_name: token-manager-windows-x64.exe
          - os: macos-latest
            platform: macos
            arch: x64
            asset_name: token-manager-macos-x64
          - os: ubuntu-latest
            platform: linux
            arch: x64
            asset_name: token-manager-linux-x64

    runs-on: ${{ matrix.os }}
    steps:
      # 检出代码
      - name: 检出代码
        uses: actions/checkout@v3

      # 设置Python环境
      - name: 设置Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # 安装依赖 (Windows)
      - name: 安装Windows依赖
        if: matrix.platform == 'windows'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller pillow

      # 安装依赖 (macOS)
      - name: 安装macOS依赖
        if: matrix.platform == 'macos'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller pillow

      # 安装依赖 (Linux)
      - name: 安装Linux系统依赖
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-tk

      - name: 安装Python依赖
        if: matrix.platform == 'linux'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      # 构建可执行文件
      - name: 构建Windows可执行文件
        if: matrix.platform == 'windows'
        run: |
          pyinstaller --onefile --windowed main.spec
          Rename-Item -Path "dist/token-manager.exe" -NewName "${{ matrix.asset_name }}"

      - name: 构建macOS可执行文件
        if: matrix.platform == 'macos'
        run: |
          pyinstaller --onefile --windowed main.spec
          mv "dist/token-manager" "dist/${{ matrix.asset_name }}"

      - name: 构建Linux可执行文件
        if: matrix.platform == 'linux'
        run: |
          pyinstaller --onefile --windowed main.spec
          mv "dist/token-manager" "dist/${{ matrix.asset_name }}"

      # 上传构建产物
      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: dist/${{ matrix.asset_name }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # 检出代码
      - name: 检出代码
        uses: actions/checkout@v3

      # 下载所有构建产物
      - name: 下载Windows构建产物
        uses: actions/download-artifact@v4
        with:
          name: token-manager-windows-x64.exe
          path: release/

      - name: 下载macOS构建产物
        uses: actions/download-artifact@v4
        with:
          name: token-manager-macos-x64
          path: release/

      - name: 下载Linux构建产物
        uses: actions/download-artifact@v4
        with:
          name: token-manager-linux-x64
          path: release/

      # 设置版本号
      - name: 设置版本号
        run: |
          echo "RELEASE_VERSION=${{ github.event.inputs.version || github.ref_name }}" >> $GITHUB_ENV

      # 创建GitHub Release并上传所有资产
      - name: 创建GitHub Release并上传资产
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          name: Release ${{ env.RELEASE_VERSION }}
          draft: false
          prerelease: false
          files: |
            release/token-manager-windows-x64.exe
            release/token-manager-macos-x64
            release/token-manager-linux-x64